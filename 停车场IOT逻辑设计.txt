停车场物联网系统逻辑设计文档
======================================

## 硬件配置
- DI1: 手动开关（管理员控制）
- DI2: 自动传感器（光电开关，车辆检测）
- DO1: 黄色指示灯
- DO2: 蓝色指示灯

## JSON消息格式
```json
{
  "params": {
    "di1_status": {
      "value": "DI1",
      "name": "手动开关状态"
    },
    "di2_status": {
      "value": "DI2", 
      "name": "自动传感器状态"
    },
    "do1_status": {
      "value": "DO1",
      "name": "黄灯状态"
    },
    "do2_status": {
      "value": "DO2",
      "name": "蓝灯状态"
    }
  }
}
```

## 控制逻辑设计

### 1. 手动控制功能（DI1 → DO1，黄灯）

#### 场景1：停车场状态管理
- DI1触发 + DO1亮（黄灯） = 停车场维护中/已满/特殊事件
- DI1不触发 + DO1灭 = 停车场正常运营
- 应用：管理员根据实际情况手动切换停车场整体状态

#### 场景2：VIP车位预留
- DI1触发 + DO1亮（黄灯） = 该区域为VIP预留车位
- DI1不触发 + DO1灭 = 该区域为普通车位，先到先得
- 应用：有VIP客户时，管理员提前预留特定区域

#### 场景3：收费确认系统
- DI1触发 + DO1亮（黄灯） = 收费已确认，车辆可离场
- DI1不触发 + DO1灭 = 未确认收费，车辆暂不可离场
- 应用：
  * 自动模式：扫码支付成功后系统自动触发
  * 手动模式：现金支付后管理员手动确认

### 2. 自动检测功能（DI2 → DO2，蓝灯）

#### 核心功能：车位占用检测
- DI2触发 + DO2灭 = 检测到车辆，车位被占用
- DI2不触发 + DO2亮（蓝灯） = 未检测到车辆，车位空闲
- 应用：实时监控车位状态，自动更新系统数据和计数

### 3. 组合应用场景

#### 场景A：正常运营
- 手动控制：DI1不触发，DO1灭（正常运营）
- 自动检测：DI2根据实际车辆情况触发，DO2相应显示
- 系统行为：正常计数，接受新车辆进入

#### 场景B：停车场已满
- 手动控制：DI1触发，DO1亮（已满警示）
- 自动检测：DI2继续正常工作
- 系统行为：拒绝新车辆进入，显示"停车场已满"

#### 场景C：VIP专用模式
- 手动控制：DI1触发，DO1亮（VIP预留警示）
- 自动检测：DI2正常工作
- 系统行为：只允许VIP车辆使用该区域

#### 场景D：收费确认流程
- 手动控制：收费后DI1触发，DO1亮（确认可离场）
- 自动检测：DI2检测车辆离开后恢复
- 系统行为：更新计费记录，释放车位计数

## 后端处理逻辑

### 数据接收处理
1. 接收JSON消息，解析DI1、DI2、DO1、DO2的状态值（0或1）
2. 根据状态组合判断当前系统场景
3. 更新数据库中的车位状态和系统状态
4. 通过WebSocket实时推送状态变化到前端

### 业务逻辑实现
1. **车位计数逻辑**：
   - DI2从0→1：车辆进入，总计数+1
   - DI2从1→0：车辆离开，总计数-1

2. **状态管理逻辑**：
   - 监控DI1+DO1组合，判断当前管理模式
   - 根据管理模式调整系统行为（是否接受新车辆等）

3. **前端更新逻辑**：
   - 实时更新3D停车场界面中的车位颜色
   - 更新统计面板数据（总车位/已占用/空闲/占用率）
   - 显示当前系统状态（正常/维护/已满/VIP模式等）

## 注意事项
- JSON只负责上报原始的4个点位状态
- 所有业务逻辑和场景判断在后端代码中实现
- 前端只负责展示，不参与逻辑判断
- 硬件保持简单，复杂逻辑在软件层面处理